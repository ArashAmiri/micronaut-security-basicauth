plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    //tag::applyplugingroovy[]
    id "groovy"
    //end::applyplugingroovy[]
}

version "0.1"
group "example.micronaut"

repositories {
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")

    //tag::securitydependency[]
    implementation "io.micronaut:micronaut-security"
    annotationProcessor 'io.micronaut:micronaut-security-annotations:2.0.0.M2'
    //end::securitydependency[]

    // Only required for Graal Native Image
    //tag::micronaut-graal[]
    annotationProcessor "io.micronaut:micronaut-graal"
    //end::micronaut-graal[]
    //tag::svm[]
    compileOnly "org.graalvm.nativeimage:svm"
    //end::svm[]

    //tag::spock[]
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut.test:micronaut-test-spock"
    //end::spock[]
}

test.classpath += configurations.developmentOnly

mainClassName = "example.micronaut.Application"

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
